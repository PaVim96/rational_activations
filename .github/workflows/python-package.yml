# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ ci-cd ]
jobs:
  build-and-test-cuda101:
    name: Tests Cuda 10.1, Python =
    runs-on: self-hosted
    strategy:
      matrix:
        python-version: ['3.8']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Current dir
      run: pwd
    - run: nvidia-smi
    - name: Create new python env (on self-hosted runners we have to handle isolation ourselves)
      run: |
        python -m venv .env
        source .env/bin/activate
    - name: Install dependencies
      run: |
        source .env/bin/activate
        pip install --upgrade pip
        pip install airspeed flake8 matplotlib pytest scipy
        pip install torch==1.7.1+cu101 -f https://download.pytorch.org/whl/torch_stable.html
        # We need to export correct pointers for CUDA_HOME and nvcc that corresond to the correct CUDA version.
        echo "CUDA_HOME=/usr/local/cuda-10.1/" >> $GITHUB_ENV
        echo "PATH=/usr/local/cuda-10.1/bin:$PATH" >> $GITHUB_ENV  # instead of alias nvcc="/usr/local/cuda-10.1/bin/nvcc"
    - name: Check Python and CUDA versions
      run: |
        source .env/bin/activate
        python --version
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import torch; print('Cuda available:', torch.cuda.is_available())"
        python -c "import torch; print('CUDA version used by PyTorch:', torch.version.cuda)"
        nvcc --version
        echo CUDA_HOME: $CUDA_HOME
#     - name: Lint with flake8
#      run: |dd
#        # stop the build if there are Python syntax errors or undefined nameshb
#        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install package
      run: |
        source .env/bin/activate
        python setup.py develop
    - name: Test
      run: |
        source .env/bin/activate
        python -m pytest
  build-and-test-cuda102:
    name: Tests Cuda 10.2, Python =
    runs-on: self-hosted
    strategy:
      matrix:
        python-version: ['3.6', '3.7.6']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Current dir
        run: pwd
      - run: nvidia-smi
      - name: Create new python env (on self-hosted runners we have to handle isolation ourselves)
        run: |
          python -m venv .env
          source .env/bin/activate
      - name: Install dependencies
        run: |
          source .env/bin/activate
          pip install --upgrade pip
          pip install airspeed flake8 matplotlib pytest scipy torch==1.7.1
          # We need to export correct pointers for CUDA_HOME and nvcc that corresond to the correct CUDA version.
          echo "CUDA_HOME=/usr/local/cuda-10.2/" >> $GITHUB_ENV
          echo "PATH=/usr/local/cuda-10.2/bin:$PATH" >> $GITHUB_ENV  # instead of alias nvcc="/usr/local/cuda-10.2/bin/nvcc"
      - name: Check Python and CUDA versions
        run: |
          source .env/bin/activate
          python --version
          python -c "import sys; print('Python version:', sys.version)"
          python -c "import torch; print('Cuda available:', torch.cuda.is_available())"
          python -c "import torch; print('CUDA version used by PyTorch:', torch.version.cuda)"
          nvcc --version
          echo CUDA_HOME: $CUDA_HOME
      - name: Install package
        run: |
          source .env/bin/activate
          python setup.py develop
      - name: Test
        run: |
          source .env/bin/activate
          python -m pytest
  build-and-test-python37:
    name: Tests Python, CUDA  =
    runs-on: self-hosted
    strategy:
      matrix:
        python-version: ['3.7']
        cuda-version: ['10.1', '10.2']
    steps:
      - uses: actions/checkout@v2
      - name: Install python version
        uses: gabrielfalcao/pyenv-action@v5
        with:
          default: "${{ matrix.python-version }}"
          command: pip install -U pip  # upgrade pip after installing python
      - name: Install dependencies
        run: |
          pip install airspeed flake8 matplotlib pytest scipy
          pip install torch==1.7.1
          # We need to export correct pointers for CUDA_HOME and nvcc that corresond to the correct CUDA version.
          echo "CUDA_HOME=/usr/local/cuda-${{ matrix.cuda-version }}/" >> $GITHUB_ENV
          echo "PATH=/usr/local/cuda-${{ matrix.cuda-version }}/bin:$PATH" >> $GITHUB_ENV
      - name: Check Python and CUDA versions
        run: |
          python --version
          python -c "import sys; print('Python version:', sys.version)"
          python -c "import torch; print('Cuda available:', torch.cuda.is_available())"
          python -c "import torch; print('CUDA version used by PyTorch:', torch.version.cuda)"
          nvcc --version
          echo CUDA_HOME: $CUDA_HOME
      - name: Install package
        run: |
          python setup.py develop
      - name: Test
        run: |
          python -m pytest

# - name: Set Python environment variable
#      run: echo "LD_LIBRARY_PATH=/tmp/runner/work/_tool/Python/${{ matrix.python-version }}/x64/lib" >> $GITHUB_ENV