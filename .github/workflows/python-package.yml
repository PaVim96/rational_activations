# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ ci-cd ]

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        python-version: ['3.6'] #['3.5', '3.6', '3.7', '3.8']

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Current dir
      run: pwd
    - run: nvidia-smi
    - name: Create new python env (on self-hosted runners we have to handle isolation ourselves)
      run: |
        python -m venv .env
        source .env/bin/activate
        which python
        python --version
    - name: Install dependencies
      run: |
        source .env/bin/activate
        pip install --upgrade pip
        pip install torch==1.7.1+cu101 -f https://download.pytorch.org/whl/torch_stable.html
        pip install flake8 pytest airspeed
        # alias nvcc="/usr/local/cuda-10.2/bin/nvcc"
        # This is somewhat bizarre, but you can't set env variables to bash
        # commands in the action workflow - so we have to use this odd way of
        # exporting a variable instead.
        # Concretely, CUDA_HOME and nvcc must correspond to the correct CUDA version.
        echo "CUDA_HOME=/usr/local/cuda-10.1/" >> $GITHUB_ENV
        echo "PATH=/usr/local/cuda-10.1/bin:$PATH" >> $GITHUB_ENV
    - name: Are GPUs recognized by our DL frameworks
      run: |
        source .env/bin/activate
        python -c "import torch; print('Cuda available:', torch.cuda.is_available())"
        python -c "import torch; print('CUDA version:', torch.version.cuda)"
        nvcc --version
        echo $CUDA_HOME
# conda install pytorch=1.7.0 torchvision torchaudio cudatoolkit=10.2 -c pytorch
#     - name: Lint with flake8
#      run: |
#        # stop the build if there are Python syntax errors or undefined names
#        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install package
      run: |
        source .env/bin/activate
        python setup.py develop --user
    - name: Test
      run: |
        source .env/bin/activate
        python -m pytest